{
  "usage/index.html": {
    "href": "usage/index.html",
    "title": "Basics | API Documentation",
    "keywords": "Basics The purpose of the libarary is to provide simple and concise extension methods that allow arguments and state to be validated efficiently at runtime."
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenCollar.Extensions.Threading | API Documentation",
    "keywords": "OpenCollar.Extensions.Threading The purpose of the libarary is to provide extensions and types supporting threading. NuGet Package Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Threading/ Project Latest Build: Source Code on GitHub Issue Tracking on GitHub Documentation on GitHub Pages Usage The purpose of the libarary is to provide extensions and types supporting threading. Related Projects OpenCollar.Extensions OpenCollar.Extensions.ApplicationInsights OpenCollar.Extensions.Collections OpenCollar.Extensions.Configuraton OpenCollar.Extensions.Environment OpenCollar.Extensions.IO OpenCollar.Extensions.Logging OpenCollar.Extensions.Security OpenCollar.Extensions.Threading OpenCollar.Extensions.Validation"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "OpenCollar.Extensions.Threading | API Documentation",
    "keywords": "OpenCollar.Extensions.Threading The purpose of the libarary is to provide extensions and types supporting threading. NuGet Package Installation Package and installation instructions at: https://www.nuget.org/packages/OpenCollar.Extensions.Threading/"
  },
  "api/OpenCollar.Extensions.Threading.DelayedExecute.html": {
    "href": "api/OpenCollar.Extensions.Threading.DelayedExecute.html",
    "title": "Class DelayedExecute | API Documentation",
    "keywords": "Class DelayedExecute A class that allows a call to an action to be postponed until the execute method has not been called for a minimum period. Inheritance System.Object OpenCollar.Extensions.Disposable DelayedExecute Implements System.IDisposable Inherited Members OpenCollar.Extensions.Disposable.Dispose() OpenCollar.Extensions.Disposable.CheckNotDisposed() Namespace : OpenCollar.Extensions.Threading Assembly : OpenCollar.Extensions.Threading.dll Syntax public class DelayedExecute : Disposable, IDisposable Constructors | Improve this Doc View Source DelayedExecute(Action, TimeSpan, String) Initializes a new instance of the DelayedExecute class. Declaration public DelayedExecute([NotNull] Action action, TimeSpan minimumWait, [NotNull] string name) Parameters Type Name Description System.Action action The action to execute. System.TimeSpan minimumWait The minimum wait before executing the action. System.String name The name to display in exceptions and when debugging. Exceptions Type Condition System.ArgumentOutOfRangeException minimumWait;The 'minimumWait' argument must be greater than zero. Properties | Improve this Doc View Source MinimumWait The minimum period that must pass between the last call to Execute() and the action being executed. Declaration public TimeSpan MinimumWait { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Name The name to display in exceptions and when debugging. Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Dispose(Boolean) Releases unmanaged and - optionally - managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides OpenCollar.Extensions.Disposable.Dispose(System.Boolean) | Improve this Doc View Source Execute() Attempts to execute the delayed action. Declaration public void Execute() Implements System.IDisposable"
  },
  "api/OpenCollar.Extensions.Threading.html": {
    "href": "api/OpenCollar.Extensions.Threading.html",
    "title": "Namespace OpenCollar.Extensions.Threading | API Documentation",
    "keywords": "Namespace OpenCollar.Extensions.Threading Classes CallThrottle A class providing support for methods that must not be called too often (e.g. UI updates). DelayedExecute A class that allows a call to an action to be postponed until the execute method has not been called for a minimum period."
  },
  "api/OpenCollar.Extensions.Threading.CallThrottle.html": {
    "href": "api/OpenCollar.Extensions.Threading.CallThrottle.html",
    "title": "Class CallThrottle | API Documentation",
    "keywords": "Class CallThrottle A class providing support for methods that must not be called too often (e.g. UI updates). Inheritance System.Object CallThrottle Implements System.IDisposable Namespace : OpenCollar.Extensions.Threading Assembly : OpenCollar.Extensions.Threading.dll Syntax public sealed class CallThrottle : IDisposable Remarks Gurantees that a gap of at least X ms will be left between calls to the wrapped method. If this is exceeded then all but the last invocation will be ignored and the last call will be delayed until at least X ms have passed. Constructors | Improve this Doc View Source CallThrottle(Action, TimeSpan, String) Initializes a new instance of the CallThrottle class. Declaration public CallThrottle([NotNull] Action call, TimeSpan minimumInterval, string name) Parameters Type Name Description System.Action call The call that will be throttled. System.TimeSpan minimumInterval The minimum interval between calls. System.String name The name to associate with this throttle. Properties | Improve this Doc View Source MinimumInterval Gets the minimum interval between calls. Declaration public TimeSpan MinimumInterval { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Name Gets the name associated with this throttle. Declaration public string Name { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() | Improve this Doc View Source Invoke() Attempt to invoke the wrapped callback. Declaration public void Invoke() Remarks If a call has been made Implements System.IDisposable"
  }
}